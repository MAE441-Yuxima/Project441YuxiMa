---
title: "Pairs Trading"
author: "Sam Borghese"
date: "10/27/2020"
output: html_document
---
# Packages
```{r}
#install.packages("quantmod")
#install.packages("aTSA")
#install.packages("ggplot2")
#install.packages("tidyr")
#install.packages("PairTrading")
library(quantmod)
library(aTSA)
library(ggplot2)
library(tidyr)
library(dplyr)

``` 

```{r}
quantmod::getSymbols("EWA", from="2006-10-09", to="2020-10-09")
quantmod::getSymbols("EWC", from="2006-10-09", to="2020-10-09")
```


# Step 4***.) Create a Upper and Lower threshold based on the Standard deviation
```{r}
ewa = unclass(EWA$EWA.Adjusted)
ewc = unclass(EWC$EWC.Adjusted)
obs = nrow(ewa)
reg = lm(ewc ~ ewa)
hedge_ratio = reg$coefficient[2]


Z_score = 1.96
spread = data.frame(ewc - hedge_ratio * ewa)
colnames(spread) = "Spread"
avg = mean(spread$Spread)
sd = sd(spread$Spread)
spread$mean = rep(avg, obs)
spread$lower_bound = rep(avg -( Z_score * sd ), length(spread$Spread))
spread$higher_bound = rep(avg + ( Z_score * sd ), length(spread$Spread))

plot(spread$Spread,
main="EWA / EWC Mean Reversion Strategy",
ylab="Spread",
type="l",
col="black")
lines(spread$mean, lty = "dashed", col = "red" )
lines(spread$lower_bound, lty = "dotted", col = "green")
lines(spread$higher_bound, lty = "dotted", col = "green")
legend("topleft",
c("Spread","Mean","Mean+-2SD"),
fill=c("black","red", "green")
)

```

```{r}
#Put in a residuals (equivalent to spread)
vector = reg$residuals
percent = .05
pass_DF_test <- function(vector, percent){
  test_results = adf.test(vector, output = TRUE) # Run ADF test
  
 return(c(test_results$type1[1,3] < percent) +     # Checks that all lag=1 reject the null
         c(test_results$type2[1,3] < percent) +
          c(test_results$type3[1,3] < percent)  > 1)
}

#pass_DF_test(vector, percent)
```

# Create Rolling Confidence Intervals
```{r}
ewa = as.data.frame(ewa)
ewc = as.data.frame(ewc)
rolling = na.omit(cbind(ewc, ewa))

# Parameters
T = 260                    # Backward Looking window in Days
Z_score = 1.69              # Amount of standard deviationa to creat bounds
percent_cointegration = .05 # Percent we reject on the t-test
EMA = .1/T                  # Smaller value creates a less reactyive mean 
obs = nrow(rolling)         # Number of observations

# Initialize empty columns of a dataframe
rolling$hedge_ratio = NA 
rolling$Spread = NA
rolling$mean = 1
rolling$sd = NA
#rolling$Cointegrated = NA  #initialize this line and line 94 to see the rolling ADF test

# t is todays observation
for (t in T:obs){
  
    reg = lm(rolling["EWC.Adjusted"][(t-T):t,1]~rolling["EWA.Adjusted"][(t-T):t,1])
    rolling$hedge_ratio[t] = reg$coefficients[2]
    rolling$Spread[t] = rolling["EWC.Adjusted"][t,1] - rolling$hedge_ratio[t] *         rolling["EWA.Adjusted"][t,1]
    
    rolling$mean[t] = EMA * (rolling$Spread[t]) + ((1-EMA) *rolling$mean[(t-1)])
    rolling$sd[t] = sd(rolling$Spread[(t-T):t]) 
    #rolling$Cointegrated[t] = pass_DF_test(reg$residuals, percent_cointegration)
   
}

rolling = na.omit(rolling)
rolling$lower_bound = rolling$mean - ( Z_score *  rolling$sd )
rolling$higher_bound = rolling$mean + ( Z_score *  rolling$sd )
```

# Plot the backward-looking values
```{r}

plot(rolling$Spread,
main="EWA / EWC Mean Reversion Strategy",
ylab="Spread",
type="l",
col="black")
lines(rolling$mean, lty = "dashed", col = "red" )
lines(rolling$lower_bound, lty = "dotted", col = "green")
lines(rolling$higher_bound, lty = "dotted", col = "green")
legend("topleft",
c("Spread","Mean","Mean+- x SD"),
fill=c("black","red", "green")
)


```



# Build a trading strategy
```{r}

rolling$Action = 0 
# "Action" will be defined as being over or under the green dotted bounds
rolling$Action[rolling$Spread > rolling$higher_bound] = 1
rolling$Action[rolling$Spread < rolling$lower_bound] = -1 
#Sets Action to 1 when the spread is very high and -1 when the spread is very low

rolling$Signal = 0
for (i in index(rolling)[-1]){
  if ((rolling$Action[i] != rolling$Action[i-1]) & rolling$Action[i] == 0){
    rolling$Signal[i] = -sign(rolling$Action[i-1])
  }
}

# Costs to buy a short or long asset at any point
longprices = rolling$EWC.Adjusted + rolling$EWA.Adjusted * (rolling$hedge_ratio/2)
shortprices = rolling$EWC.Adjusted/2 + rolling$EWA.Adjusted * (rolling$hedge_ratio)



rolling$MeanCrossings = 0
for (i in index(rolling)[c(-1,-2)]){
  if (sign(rolling$Spread[i] - rolling$mean[i-1]) != sign(rolling$Spread[i-1] - rolling$mean[i-2]) ){
    rolling$MeanCrossings[i] = 1
  }
}

rolling$DailyProfits = 1
in_position = 0 #0 if not holding a position or 1 if you are in a position
profit = c()
for (i in index(rolling)){
  if (in_position == 0){
    if(rolling$Signal[i] == 1 ){
      in_position = 1
      purchase_price = longprices[i]
      Spread_open = rolling$Spread[i]
    } else if (rolling$Signal[i] == -1 ){
      in_position = -1
      purchase_price = shortprices[i]
      Spread_open = rolling$Spread[i]
    }
  }
  
  
  if (in_position != 0){
    if ( rolling$MeanCrossings[i] == 1){
      if (in_position == 1){
      profit = c(profit, (rolling$Spread[i] - Spread_open) / purchase_price)
      in_position = 0
      } else if (in_position == -1){
        profit = c(profit, ( Spread_open - rolling$Spread[i]) / purchase_price)
        in_position = 0
      }
    }
  }
  
# Calculate a cumulative profit Curve
 if(in_position == 1){
   rolling$DailyProfits[i] = (rolling$Spread[i] - rolling$Spread[i-1]) / purchase_price + 1
 } else if (in_position == -1){
      rolling$DailyProfits[i] = (rolling$Spread[i-1] - rolling$Spread[i]) / purchase_price + 1
 }

  
}


profit

plot(cumprod(rolling$DailyProfits), type = "l", main="Cumulative Profits of Pair Trading Strategy",
ylab = "Cumulative Funds at 1.0 initially invested",
xlab = "2006-2020",
col="black")
```
# Show how a change to the strategy can work
```{r}
rolling$Action = 0 
# "Action" will be defined as being over or under the green dotted bounds
rolling$Action[rolling$Spread > rolling$higher_bound] = 1
rolling$Action[rolling$Spread < rolling$lower_bound] = -1 
#Sets Action to 1 when the spread is very high and -1 when the spread is very low

rolling$Signal = 0
for (i in index(rolling)[-1]){
  if ((rolling$Action[i] != rolling$Action[i-1]) & rolling$Action[i] == 0){
    rolling$Signal[i] = -sign(rolling$Action[i-1])
  }
}

longprices = rolling$EWC.Adjusted + rolling$EWA.Adjusted * (rolling$hedge_ratio/2)
shortprices = rolling$EWC.Adjusted/2 + rolling$EWA.Adjusted * (rolling$hedge_ratio)



rolling$MeanCrossings = 0
for (i in index(rolling)[c(-1,-2)]){
  if (sign(rolling$Spread[i] - rolling$mean[i-1]) != sign(rolling$Spread[i-1] - rolling$mean[i-2]) ){
    rolling$MeanCrossings[i] = 1
  }
}

rolling$DailyProfits = 1
in_position = 0 #0 if not holding a position or 1 if you are in a position
profit = c()
for (i in index(rolling)){
  if (in_position == 0){
    if(rolling$Signal[i] == 1 ){
      in_position = 1
      purchase_price = longprices[i]
      Spread_open = rolling$Spread[i]
    } else if (rolling$Signal[i] == -1 ){
      in_position = -1
      purchase_price = shortprices[i]
      Spread_open = rolling$Spread[i]
    }
  }
  
  
  if (in_position != 0){
    ###Added section
    if (rolling$Action[i] != 0){
      profit = c(profit, ( Spread_open - rolling$Spread[i]) / purchase_price)
      in_position = 0
    }
    ###End of added section
    if ( rolling$MeanCrossings[i] == 1){
      if (in_position == 1){
      profit = c(profit, (rolling$Spread[i] - Spread_open) / purchase_price)
      in_position = 0
      } else if (in_position == -1){
        profit = c(profit, ( Spread_open - rolling$Spread[i]) / purchase_price)
        in_position = 0
      }
    }
  }
  
# Calculate a cumulative profit Curve
 if(in_position == 1){
   rolling$DailyProfits[i] = (rolling$Spread[i] - rolling$Spread[i-1]) / purchase_price + 1
 } else if (in_position == -1){
      rolling$DailyProfits[i] = (rolling$Spread[i-1] - rolling$Spread[i]) / purchase_price + 1
 }

  
}


profit

plot(cumprod(rolling$DailyProfits), type = "l", main="Cumulative Profits of Pair Trading Strategy",
ylab = "Cumulative Funds at 1.0 initially invested",
xlab = "2006-2020",
col="black")
```








