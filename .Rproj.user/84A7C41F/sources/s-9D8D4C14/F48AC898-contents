---
title: "Cointegration HW"
author: "Yuxi Ma"
date: "11/1/2020"
output: pdf_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r, include=FALSE}
#install.packages("quantmod")
#install.packages("aTSA")
library(quantmod)
library(aTSA)
library(tidyverse)
library(dplyr)
library(pastecs)
library(ggplot2)
#install.packages("PairTrading")
```

```{r}
#Price of Crude Oil Futures
quantmod::getSymbols("CL=F", from="2006-04-26", to="2020-10-09")
#Cryptocurrencies
quantmod::getSymbols("BTC-USD", from="2006-04-26", to="2020-10-09")

CLF = as.data.frame(`CL=F`)
CLF$Date = rownames(CLF)
BTCUSD = as.data.frame(`BTC-USD`)
BTCUSD$Date = rownames(BTCUSD)
df = merge(CLF, BTCUSD, by = "Date", all.y = TRUE)
df1 = na.omit(df)

df_used = df1 %>%
            select(Date, `CL=F.Adjusted`, `BTC-USD.Adjusted`)
```

# Step 1.) Test that data is I(1)
```{r}
adf.test(diff(df_used$`CL=F.Adjusted`))
```
As p-value is quite low, at least with significance level $\alpha = 0.01$, we can conclude that the difference is stationary, which proves that the data itself is I(1).

```{r}
adf.test(diff(df_used$`BTC-USD.Adjusted`))
```
Similar to the previous result, small p-value means that the difference is stationary, and the original data is I(1).

# Plot the Series'
```{r}
df_used$`BTC-100USD.Adjusted` = df_used$`BTC-USD.Adjusted`/100
stat.desc(df_used$`BTC-100USD.Adjusted`) #max = 191.142

plot(df_used$`CL=F.Adjusted`, type="l", ylim = c(-40,200), xlab="September 17th 2014 to October 8th 2020", ylab="Crude Oil Price in USD", col="blue")
par(new=T)
lines(df_used$`BTC-100USD.Adjusted`, type="l", xlab="", ylab="", col="red")
par(new=F)
legend(1, 180,legend=c("CL=F.Adjusted", "BTC-100USD.Adjusted"),
       col=c("blue", "red"), lty=c(1,1), cex=0.8)
```

# Parametric Plot
```{r}
plot(df_used$`CL=F.Adjusted`, df_used$`BTC-100USD.Adjusted`, xlab="Crude Oil Price in USD", ylab="Bitcoin price in 100USD")
```

# Step 2.) Run and OLS regression to get the residuals
```{r}
comb1 = lm(df_used$`BTC-100USD.Adjusted`~df_used$`CL=F.Adjusted`)
comb1
hedge_ratio = comb1$coefficients[2]
mean = comb1$coefficients[1]

#Errors
plot(df_used$`BTC-100USD.Adjusted` - hedge_ratio * df_used$`CL=F.Adjusted` - mean, type="l", ylab = "Error term")

#residuals
plot(comb1$residuals, type="l", xlab="September 17th 2014 to October 8th 2020", ylab="Residuals of Crude Oil Price and Bitcoin regression")
```
From the graph, the errors do not seem to be stationary.

# Step 3.) Test for stationarity in the residuals
```{r}
adf.test(comb1$residuals)
```
From the table, p-value is quite large which means this data series is not stationary.

```{r}
adf.test(diff(comb1$residuals))
```
However, from this table we can see that the residuals is an I(1) series.

```{r}
#S&P500
quantmod::getSymbols("^GSPC", from="2006-04-26", to="2020-10-09")
GSPC = as.data.frame(GSPC)
GSPC$Date = rownames(GSPC)

df = merge(GSPC, df_used, by = "Date", all.y = TRUE)
df1 = na.omit(df)

df_used = df1 %>%
            select(Date, `CL=F.Adjusted`, `BTC-USD.Adjusted`, `BTC-100USD.Adjusted`, GSPC.Adjusted)
comb1 = lm(df_used$`BTC-100USD.Adjusted`~df_used$`CL=F.Adjusted`)
```

```{r}
adf.test(diff(df_used$GSPC.Adjusted))
```
Small p-value means that the difference is stationary, so the original data is I(1).

# Plot the Series'
```{r}
df_used$GSPC.50Adjusted = df_used$GSPC.Adjusted/50
stat.desc(df_used$GSPC.50Adjusted)

plot(comb1$residuals, type="l", ylim = c(-80,160), xlab="September 17th 2014 to October 8th 2020", ylab="Residual from the first pair", col="blue")
par(new=T)
lines(df_used$GSPC.50Adjusted, type="l", xlab="", ylab="", col="red")
par(new=F)
legend(1, 140,legend=c("comb1_residuals", "GSPC.50Adjusted"),
       col=c("blue", "red"), lty=c(1,1), cex=0.8)
```


```{r}
comb2 = lm(df_used$GSPC.50Adjusted~comb1$residuals)
comb2
hedge_ratio1 = comb2$coefficients[2]
mean1 = comb2$coefficients[1]

#Errors
plot(df_used$GSPC.50Adjusted - hedge_ratio1 * comb1$residuals - mean1, type="l", ylab = "Error term")
```

```{r}
adf.test(comb2$residuals)
```
From the table, at least under $\alpha = 0.05$, the residuals in combination 2 is stationary, which means the pair trading of the first combination (Bitcoin + Crude Oil Futures) and the S&P500 can together produce a stationary return pattern.

#2.Pair Trading
# Step 4***.) Create a Upper and Lower threshold based on the Standard deviation
```{r}
obs = length(df_used$GSPC.50Adjusted)

Z_score = 1.96
spread = data.frame(df_used$GSPC.50Adjusted - hedge_ratio1 * comb1$residuals)
colnames(spread) = "Spread"
avg = mean(spread$Spread)
sd = sd(spread$Spread)
spread$mean = rep(avg, obs)
spread$lower_bound = rep(avg -( Z_score * sd ), length(spread$Spread))
spread$higher_bound = rep(avg + ( Z_score * sd ), length(spread$Spread))

plot(spread$Spread,
main="S&P500 / Comb of Bitcoin&Crude Oil Mean Reversion Strategy",
ylab="Spread",
type="l",
col="black")
lines(spread$mean, lty = "dashed", col = "red" )
lines(spread$lower_bound, lty = "dotted", col = "green")
lines(spread$higher_bound, lty = "dotted", col = "green")
legend("topleft",
c("Spread","Mean","Mean+-2SD"),
fill=c("black","red", "green")
)
```

```{r}
#Put in a residuals (equivalent to spread)
vector = comb2$residuals
percent = .05
pass_DF_test <- function(vector, percent){
  test_results = adf.test(vector, output = TRUE) 
  
 return(c(test_results$type1[1,3] < percent) *    
         c(test_results$type2[1,3] < percent) *
          c(test_results$type3[1,3] < percent)  == 1)
}

pass_DF_test(vector, percent)
```
By p-value, this data series can be viewed as stationary, at least under $\alpha = 0.05$.

# Step 4***.) Create Rolling Confidence Intervals
```{r, message=FALSE, warning=FALSE}
rolling = as.data.frame(na.omit(cbind(df_used$GSPC.50Adjusted, comb1$residuals)))
colnames(rolling) <- c("GSPC.50Adjusted", "comb1residuals")

# Parameters
T = 260                    # Backward Looking window in Days
Z_score = 1.69              # Amount of standard deviationa to creat bounds
percent_cointegration = .05 # Percent we reject on the t-test
EMA = .1/T                  # Smaller value creates a less reactyive mean 
obs = nrow(rolling)         # Number of observations

# Initialize empty columns of a dataframe
rolling$hedge_ratio = NA 
rolling$Spread = NA
rolling$mean = 1
rolling$sd = NA
rolling$Cointegrated = NA

# t is todays observation
for (t in T:obs){
    reg = lm(rolling$GSPC.50Adjusted[(t-T):t]~rolling$comb1residuals[(t-T):t])
    rolling$hedge_ratio[t] = reg$coefficients[2]
    rolling$Spread[t] = rolling$GSPC.50Adjusted[t] - rolling$hedge_ratio[t] *         rolling$comb1residuals[t]
    rolling$mean[t] = EMA * (rolling$Spread[t]) + ((1-EMA) *rolling$mean[(t-1)])
    rolling$sd[t] = sd(rolling$Spread[(t-T):t]) 
    #rolling$Cointegrated[t] = pass_DF_test(reg$residuals, percent_cointegration)
   
}

rolling = na.omit(rolling)

rolling$lower_bound = rolling$mean - ( Z_score *  rolling$sd )
rolling$higher_bound = rolling$mean + ( Z_score *  rolling$sd )
```

```{r}
plot(rolling$Spread,
main="S&P500 / Comb of Bitcoin&Crude Oil Mean Reversion Strategy",
ylab="Spread",
type="l",
col="black", ylim = c(-30,90))
lines(rolling$mean, lty = "dashed", col = "red" )
lines(rolling$lower_bound, lty = "dotted", col = "green")
lines(rolling$higher_bound, lty = "dotted", col = "green")
legend("topleft",
c("Spread","Mean","Mean+-2SD"),
fill=c("black","red", "green")
)
```

